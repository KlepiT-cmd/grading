openapi: 3.0.3
info:
  title: Grading Client contract
  description: |-
  contact:
    email: klepeisz.tibor@novaservices.hu
  version: 1.0.0
servers:
  - url: https://localhost/
tags:
  - name: colleagues
    description: All functions for colleagues
  - name: documents
    description: Operations about documents
  - name: grading
    description: Operations about grading
  - name: skill
    description: Operations about skill
  - name: levels
    description: Operations about levels
paths:
  /colleague/{colleagueId}:
    put:
      tags:
        - colleagues
      summary: Update an existing colleague
      description: Update an existing colleague by Id
      operationId: updateColleague
      parameters:
        - name: colleagueId
          in: path
          description: ID to filter by
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Update an existent colleague
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Colleague'
          application/xml:
            schema:
              $ref: '#/components/schemas/Colleague'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Colleague'
        required: true
      responses:
        '200':
          description: Successful modification
        '400':
          description: Bad request
        '404':
          description: Colleague not found
  /colleagues:
    get:
      tags:
        - colleagues
      summary: Get colleagues
      description: Multiple status values can be provided with comma separated strings
      operationId: getColleagues
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Colleagues'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Colleagues'
        '404':
          description: Colleagues list is empty
  /skill/{chapterId}:
    get:
      tags:
        - skill
      summary: get skills by chapter
      description: get skills by chapter
      operationId: getSkillsByChapter
      parameters:
        - name: chapterId
          in: path
          description: ID to filter by
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Skill'
            application/xml:
              schema:
                $ref: '#/components/schemas/Skill'
        '404':
          description: Skill list is empty
  /documents/{colleagueId}&{year}:
    post:
      tags:
        - documents
      summary: create documents by id and year
      description: create documents by id and year
      operationId: createDocumentsByIdAndYear
      parameters:
        - name: colleagueId
          in: path
          description: ID to filter by
          required: true
          schema:
            type: string
            format: uuid
        - name: year
          in: path
          description: the year of the document
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
            application/xml:
              schema:
                $ref: '#/components/schemas/Document'
        '404':
          description: document not found
    get:
      tags:
        - documents
      summary: Get documents by id and year
      description: Show all chapters
      operationId: getAllDocuments
      parameters:
        - name: colleagueId
          in: path
          description: ID to filter by
          required: true
          schema:
            type: string
            format: uuid
        - name: year
          in: path
          description: the year of the document
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Documents'
            application/xml:
              schema:
                $ref: '#/components/schemas/Documents'
  /levels:
    get:
      tags:
        - levels
      summary: Show all levels
      description: Show all levels
      operationId: getAllLevels
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Levels'
            application/xml:
              schema:
                $ref: '#/components/schemas/Levels'
        '404':
          description: Level list is empty
  /grading:
    post:
      tags:
        - grading
      summary: create grading
      description: create grading
      operationId: createGrading
      requestBody:
        description: Create a grading
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Grading'
          application/xml:
            schema:
              $ref: '#/components/schemas/Grading'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Grading'
      responses:
        '200':
          description: successful operation
        '400':
          description: Bad request
  /grading/{gradingId}:
    put:
      tags:
        - grading
      summary: update grading
      description: update grading
      operationId: updateGrading
      parameters:
        - name: gradingId
          in: path
          description: ID to filter by
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Create a grading
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Grading'
          application/xml:
            schema:
              $ref: '#/components/schemas/Grading'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Grading'
      responses:
        '200':
          description: successful operation
        '400':
          description: Bad request
    get:
      tags:
        - grading
      summary: get grading
      description: get grading
      operationId: getGrading
      parameters:
        - name: gradingId
          in: path
          description: ID to filter by
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Gradings'
            application/xml:
              schema:
                $ref: '#/components/schemas/Gradings'
            application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/Gradings'
        '400':
          description: Bad request
components:
  schemas:
    Documents:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: eb622262-fe5c-4a04-a833-7527285d5c4c
        colleagueId:
          type: string
          format: uuid
          example: eb622262-fe5c-4a04-a833-7527285d5c4c
        document:
          type: string
          format: base64
          example: ZWh1bmUgdmFuIGEgZ3JhZGluZyBkb2tzaSBtb3Jl
      xml:
        name: document
    Document:
      type: object
      properties:
        colleagueId:
          type: string
          format: uuid
          example: eb622262-fe5c-4a04-a833-7527285d5c4c
        document:
          type: string
          format: base64
          example: ZWh1bmUgdmFuIGEgZ3JhZGluZyBkb2tzaSBtb3Jl
      xml:
        name: document
    Skill:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: eb622262-fe5c-4a04-a833-7527285d5c4c
        name:
          type: string
          example: 'Hallott már az agilis és a vízesés módszertanokról és magas szinten meg is tudja fogalmazni a kettő közötti különbséget. Néhány alapfogalmat (pl. jellemző agilis ceremóniák) is ismer.'
        chapterId:
          type: string
          format: uuid
          example: eb622262-fe5c-4a04-a833-7527285d5c4c
        anaFocus:
          type: array
          items:
            $ref: '#/components/schemas/AnaFocus'
        competencyId:
          type: string
          example: ANA01
        competencyName:
          type: string
          example: 'Fejlesztési módszertanok ismerete és alkalmazása'
        isDevCommon:
          type: boolean
          example: true
        isSoftSkill:
          type: boolean
          example: true
        competencyLevel:
          type: integer
          example: 1
      xml:
        name: skill
    AnaFocus:
      type: object
      properties:
        name:
          type: string
          enum: [CORP, TECH,COORDINATION]
          example: "CORP"
        isInFocus:
          type: boolean
          example: false
    Grading:
      type: object
      properties:
        chapterId:
          type: string
          format: uuid
          example: eb622262-fe5c-4a04-a833-7527285d5c4c
        colleagueId:
          type: string
          format: uuid
          example: eb622262-fe5c-4a04-a833-7527285d5c4c
        skills:
          type: array
          items:
            $ref: '#/components/schemas/SkillItems'
      xml:
        name: chapter
    Gradings:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: eb622262-fe5c-4a04-a833-7527285d5c4c
        chapterId:
          type: string
          format: uuid
          example: eb622262-fe5c-4a04-a833-7527285d5c4c
        colleagueId:
          type: string
          format: uuid
          example: eb622262-fe5c-4a04-a833-7527285d5c4c
        skills:
          type: array
          items:
            $ref: '#/components/schemas/SkillItems'
      xml:
        name: chapter
    SkillItems:
      type: object
      properties:
        skillId:
          type: string
          format: uuid
          example: eb622262-fe5c-4a04-a833-7527285d5c4c
        skillLevel:
          type: string
          format: uuid
          example: eb622262-fe5c-4a04-a833-7527285d5c4c
        teamLeadComment:
          type: string
          example: a beállított szint ezért meg azért nem jó
    Levels:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: eb622262-fe5c-4a04-a833-7527285d5c4c
        name:
          type: string
          example: Medior2
      xml:
        name: tag
    Colleague:
      required:
        - name
        - photoUrls
      type: object
      properties:
        firstName:
          type: string
          example: Elek
        lastName:
          type: string
          example: Teszt
        chapter:
          type: string
          enum:
            - ANA
            - BE
            - TEST
        teamLead:
          type: string
          example: Teszt Teamlead
        isCeo:
          type: boolean
        currentLevelId:
          type: string
          format: uuid
          example: eb622262-fe5c-4a04-a833-7527285d5c4c
        newLevelId:
          type: string
          format: uuid
          example: eb622262-fe5c-4a04-a833-7527285d5c4c
      xml:
        name: colleague
    Colleagues:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: eb622262-fe5c-4a04-a833-7527285d5c4c
        firstName:
          type: string
          example: Elek
        lastName:
          type: string
          example: Teszt
        chapter:
          type: string
          enum:
            - ANA
            - BE
            - TEST
        teamLead:
          type: string
          example: Teszt Teamlead
        isCeo:
          type: boolean
        currentLevelId:
          type: string
          format: uuid
          example: eb622262-fe5c-4a04-a833-7527285d5c4c
      xml:
        name: colleague